# -*- mode: ruby [p-*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  $jenkinsscript = <<-SCRIPT
  echo installing java8.......
  sudo apt update 
  sudo apt install -y openjdk-8-jdk openjdk-8-jre

  echo installing jenkins...........
  wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
  sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
  sudo apt-get update
  sudo apt-get install -y jenkins

  echo installing docker..........
  curl -fsSL get.docker.com | /bin/bash

  echo add jenkins user to the docker group.....
  sudo usermod -aG docker jenkins
  sudo systemctl restart docker

  SCRIPT

  $gitlabscript = <<-SCRIPT
  echo installing gitlab...
  sudo apt update
  sudo apt install -y curl openssh-server ca-certificates
  curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
  sudo EXTERNAL_URL="http://172.20.20.21" apt install -y gitlab-ee
  SCRIPT

  $k8sscript = <<-SCRIPT
  echo "installing and configuring k8s cluster"
  sudo apt-get update && sudo apt-get install -y apt-transport-https
  sudo su -
  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
  deb http://apt.kubernetes.io/ kubernetes-xenial main
  EOF
  sudo apt-get update

  #disable swap memory to avoid issues with k8s
  swapoff -a
  sudo sed -i '/ swap / s/^\(.*\)$/#1/g' /etc/fstab

  #install docker and k8s modules
  sudo apt-get install -y docker.io kubelet kubeadm kubectl kubernetes-cni
  sudo systemctl restart docker
  sudo systemctl enable docker.service
  sudo systemctl daemon-reload
  sudo systemctl restart kubelet
  sudo systemctl enable kubelet.service

  sudo kubeadm init
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  SCRIPT

  $awx = <<-SCRIPT
  #install ansible
  sudo apt update && sudo apt -y upgrade
  #sudo reboot
  echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/ansible.list
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
  sudo apt -y update
  sudo apt -y install ansible

  #install docker
  sudo apt -y update
  sudo apt -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  sudo apt -y update
  sudo apt -y install docker-ce docker-ce-cli containerd.io
  sudo usermod -aG docker $USER
  newgrp docker

  #install docker compose
  sudo apt install -y curl
  curl -s https://api.github.com/repos/docker/compose/releases/latest \
  | grep browser_download_url \
  | grep docker-compose-Linux-x86_64 \
  | cut -d '"' -f 4 \
  | wget -qi -
  chmod +x docker-compose-Linux-x86_64
  sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose

  #install npm and node.js
  sudo apt install -y nodejs npm
  sudo npm install npm --global
  
  #install docker-py python module
  sudo apt install -y python3-pip git pwgen vim
  sudo pip3 install -y requests==2.14.2
  sudo pip3 install docker-compose==1.25.0
  sudo su -
  git clone --depth 50 https://github.com/ansible/awx.git
  cd awx/installer/
  #vim inventory
  pwgen -N 1 -s 30
  ansible-playbook -i inventory install.yml

  SCRIPT


  $docker = <<-SCRIPT
  #install ansible
  sudo apt update && sudo apt -y upgrade
  #sudo reboot
  echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/ansible.list
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
  sudo apt -y update
  sudo apt -y install ansible

  #install docker
  sudo apt -y update
  sudo apt -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  sudo apt -y update
  sudo apt -y install docker-ce docker-ce-cli containerd.io
  sudo usermod -aG docker $USER
  newgrp docker

  #install docker compose
  sudo apt install -y curl
  curl -s https://api.github.com/repos/docker/compose/releases/latest \
  | grep browser_download_url \
  | grep docker-compose-Linux-x86_64 \
  | cut -d '"' -f 4 \
  | wget -qi -
  chmod +x docker-compose-Linux-x86_64
  sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
  
  SCRIPT

  config.vm.box = "ubuntu/bionic64"
  # config.vm.provider "virtualbox" do |vb|
  #   vb.memory = 4096
  #   vb.cpus = 2
  # end

  config.vm.define "target1" do |target1|
    target1.vm.network "private_network", ip: "172.20.20.26"
  end

  config.vm.define "target2" do |target2|
    target2.vm.network "private_network", ip: "172.20.20.27"
  end

  config.vm.define "jenkins" do |jenkins|
    jenkins.vm.network "private_network", ip: "172.20.20.21"
    jenkins.vm.provision "shell", inline: $jenkinsscript
  end

  config.vm.define "gitlab" do |gitlab|
    gitlab.vm.network "private_network", ip: "172.20.20.22"
    gitlab.vm.provision "shell", inline: $gitlabscript
  end

  config.vm.define "masterk8s" do |k8s|
    k8s.vm.network "private_network", ip: "172.20.20.23"
    #k8s.vm.provision "shell", inline: $k8sscript
    k8s.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
      vb.cpus = 2
    end
  end

  config.vm.define "workerk8s" do |worker|
      worker.vm.hostname = "workerk8s"
      worker.vm.network "private_network", ip: "172.20.20.24"
      worker.vm.provision "shell", inline: $k8sscript
  end

  config.vm.define "ansible_tower" do |awx|
    awx.vm.hostname = "awx"
    awx.vm.network "private_network", ip: "172.20.20.25"
    awx.vm.provision "shell", inline: $awx
    awx.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
      vb.cpus = 2
    end
  end

  config.vm.define "docker_host" do |docker|
    docker.vm.hostname = "dockerhost"
    docker.vm.network "private_network", ip: "172.20.20.25"
    docker.vm.provision "shell", inline: $docker
    docker.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
      vb.cpus = 2
    end
  end
end
